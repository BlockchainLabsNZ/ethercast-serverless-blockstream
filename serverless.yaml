service:
  name: serverless-blockstream

plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-autoscaling
  - serverless-webpack

custom:
  webpackIncludeModules: true # enable auto-packing of external modules
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:service}-${self:custom.stage}
  newBlockQueueName: ${self:custom.prefix}-new-blocks.fifo
  logFirehoseQueue: ${self:custom.prefix}-log-firehose.fifo
  transactionFirehoseQueue: ${self:custom.prefix}-tx-firehose.fifo
  blockReadyTopicName: ${self:custom.prefix}-block-ready
  blockProcessedTopicName: ${self:custom.prefix}-block-processed
  srcNodeUrl: ${opt:srcNodeUrl, "https://mainnet.infura.io/0eep3H3CSiqitPXv0aOy"}
  networkId: ${opt:networkId, "1"} # id of the network from which the stack pulls data, validated against the node
  numBlocksDelay: ${opt:numBlocksDelay, "0"}
  blockDataTtlMs: ${opt:blockDataTtlMs, "604800000"} # how long the data stays in dynamo before being removed
  logLevel: ${opt:logLevel, "info"} # log level of the lambdas
  rewindBlockLookback: ${opt:rewindBlockLookback, "25"} # log level of the lambdas
  baseDynamoDDBCapacity: ${opt:baseDynamoDDBCapacity, "1"}
  maxDynamoDDBCapacity: ${opt:maxDynamoDDBCapacity, "100"}
  etherscanApiUrl: ${opt:etherscanApiUrl, "https://api.etherscan.io/api"}
  etherscanApiKey: ${opt:etherscanApiKey, "17CY9NYG5A77HWV1I8XP7U4IE9DB11KWT5"}
  alertNotificationEmail: "aws-alerts+${self:custom.prefix}@ethercast.io" # where cloudwatch alarms alert to
  capacities:
    - table: BlocksTable  # DynamoDB Resource
      read:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum read capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum write capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum write capacity
        usage: 0.8        # Targeted usage percentage
    - table: AbiTable  # DynamoDB Resource
      read:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum read capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum write capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum write capacity
        usage: 0.8        # Targeted usage percentage
    - table: BlockStreamStateTable  # DynamoDB Resource
      read:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum read capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum write capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum write capacity
        usage: 0.8        # Targeted usage percentage

provider:
  name: aws
  logRetentionInDays: 7
  runtime: nodejs6.10
  environment: # service wide environment variables
    BLOCKSTREAM_STATE_TABLE: ${self:custom.prefix}-blockstream-state # the table containing the state of blockstream
    BLOCKS_TABLE: ${self:custom.prefix}-blocks # the table containing full blocks and their logs (compressed)
    ABI_TABLE: ${self:custom.prefix}-abis # the table containing contract abis
    BLOCK_READY_TOPIC_NAME: ${self:custom.blockReadyTopicName}
    BLOCK_PROCESSED_TOPIC_NAME: ${self:custom.blockProcessedTopicName}
    NEW_BLOCK_QUEUE_NAME: ${self:custom.newBlockQueueName}  # Queue that receives new blocks
    LOG_FIREHOSE_QUEUE_NAME: ${self:custom.logFirehoseQueue} # Queue that receives log events
    TRANSACTION_FIREHOSE_QUEUE_NAME: ${self:custom.transactionFirehoseQueue} # Queue that receives transactions
    SRC_NODE_URL: ${self:custom.srcNodeUrl} # the ethereum node URL that is used
    NUM_BLOCKS_DELAY: ${self:custom.numBlocksDelay} # how many blocks behind the chain we wait to send logs
    BLOCK_DATA_TTL_MS: ${self:custom.blockDataTtlMs}
    LOG_LEVEL: ${self:custom.logLevel}
    NETWORK_ID: ${self:custom.networkId}
    REWIND_BLOCK_LOOKBACK: ${self:custom.rewindBlockLookback}
    ETHERSCAN_API_URL: ${self:custom.etherscanApiUrl}
    ETHERSCAN_API_KEY: ${self:custom.etherscanApiKey}

  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource:
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.BLOCKSTREAM_STATE_TABLE}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.BLOCKS_TABLE}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.ABI_TABLE}"
    - Effect: Allow
      Action: # Gives permission to push logs to the SQS queue
        - sqs:SendMessage
        - sqs:SendMessageBatch
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueUrl
      Resource:
        - "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.newBlockQueueName}"
    - Effect: Allow
      Action: # Gives permission to push logs to the SQS queue
        - sqs:SendMessage
        - sqs:SendMessageBatch
        - sqs:GetQueueUrl
      Resource:
        - "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.logFirehoseQueue}"
        - "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.transactionFirehoseQueue}"
    - Effect: Allow
      Action: # Gives permission to notify and find these topic arns
        - sns:Publish
        - sns:CreateTopic
      Resource:
        - "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.blockReadyTopicName}"
        - "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.blockProcessedTopicName}"


functions:
  poll-for-blocks:
    handler: src/poll-for-blocks.start
    memorySize: 128
    timeout: 60
    reservedConcurrency: 1
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

  drain-block-queue:
    handler: src/drain-block-queue.start
    memorySize: 192
    reservedConcurrency: 1
    timeout: 300
    events:
      - sns:
          arn:
            Ref: "BlockReadyTopic"
          topicName: ${self:custom.blockReadyTopicName}


resources:
  Description: The block streaming stack that populates the log and transaction queues
  Outputs:
    LogFirehoseQueueName:
      Description: The name of the log firehose SQS queue to which all incoming logs events are sent
      Value:
        Fn::GetAtt:
          - "LogFirehoseQueue"
          - "QueueName"
      Export:
        Name: ${self:custom.prefix}-log-firehose-queue-name
    TransactionFirehoseQueueName:
      Description: The name of the transaction firehose SQS queue to which all incoming transactions are sent
      Value:
        Fn::GetAtt:
          - "TransactionFirehoseQueue"
          - "QueueName"
      Export:
        Name: ${self:custom.prefix}-tx-firehose-queue-name
    BlockProcessedTopicArn:
      Description: Arn of the topic notified when a block is ready
      Value:
        Ref: "BlockProcessedTopic"
      Export:
        Name: ${self:custom.prefix}-block-processed-topic-arn

  Resources:
    BlockReadyTopic: # this topic is notified when a block is available for processing
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:custom.blockReadyTopicName}
        TopicName: ${self:custom.blockReadyTopicName}

    BlockProcessedTopic: # this topic is notified when a block is finished processing
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:custom.blockProcessedTopicName}
        TopicName: ${self:custom.blockProcessedTopicName}

    BlockStreamStateTable: # This table is throttled and should not autoscale
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BLOCKSTREAM_STATE_TABLE}
        AttributeDefinitions:
          - AttributeName: networkId
            AttributeType: N
        KeySchema:
          - AttributeName: networkId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}

    BlocksTable: # This table's autoscaling is to handle downtimes or node switching. When it needs to catch up, it costs more.
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BLOCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: hash
            AttributeType: S
          - AttributeName: number
            AttributeType: S
        KeySchema:
          - AttributeName: hash
            KeyType: HASH
          - AttributeName: number
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    AbiTable: # This table's autoscaling is to handle downtimes or node switching. When it needs to catch up, it costs more.
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ABI_TABLE}
        AttributeDefinitions:
          - AttributeName: address
            AttributeType: S
        KeySchema:
          - AttributeName: address
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    NewBlockQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.newBlockQueueName}
        FifoQueue: true
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60

    TransactionFirehoseQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.transactionFirehoseQueue}
        FifoQueue: true
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60

    LogFirehoseQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.logFirehoseQueue}
        FifoQueue: true
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60

    AlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint: ${self:custom.alertNotificationEmail}
            Protocol: email

    NewBlockQueueDepthAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm if new blocks are not being removed from the queue"
        Namespace: "AWS/SQS"
        MetricName: ApproximateNumberOfMessagesVisible
        Dimensions:
          - Name: QueueName
            Value: ${self:custom.newBlockQueueName}
        Statistic: Maximum
        Period: 60
        Threshold: 5
        EvaluationPeriods: 3
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - Ref: AlarmTopic
        OKActions:
          - Ref: AlarmTopic
        TreatMissingData: missing

    NewBlockQueueActiveAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm if new blocks have not been entered into queue in five minutes"
        Namespace: "AWS/SQS"
        MetricName: NumberOfMessagesSent
        Dimensions:
          - Name: QueueName
            Value: ${self:custom.newBlockQueueName}
        Statistic: Sum
        Period: 300
        Threshold: 0
        EvaluationPeriods: 3
        ComparisonOperator: LessThanOrEqualToThreshold
        AlarmActions:
          - Ref: AlarmTopic
        OKActions:
          - Ref: AlarmTopic
        TreatMissingData: breaching

    LogFirehoseQueueDepthAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm if new logs are not being removed from the queue"
        Namespace: "AWS/SQS"
        MetricName: ApproximateNumberOfMessagesVisible
        Dimensions:
          - Name: QueueName
            Value: ${self:custom.logFirehoseQueue}
        Statistic: Maximum
        Period: 60
        Threshold: 500
        EvaluationPeriods: 3
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - Ref: AlarmTopic
        OKActions:
          - Ref: AlarmTopic
        TreatMissingData: missing

    LogFirehoseQueueActiveAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm if logs have not been added to queue in five minutes"
        Namespace: "AWS/SQS"
        MetricName: NumberOfMessagesSent
        Dimensions:
          - Name: QueueName
            Value: ${self:custom.logFirehoseQueue}
        Statistic: Sum
        Period: 300
        Threshold: 0
        EvaluationPeriods: 3
        ComparisonOperator: LessThanOrEqualToThreshold
        AlarmActions:
          - Ref: AlarmTopic
        OKActions:
          - Ref: AlarmTopic
        TreatMissingData: breaching

    TransactionFirehoseQueueDepthAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm if new txs are not being removed from the queue"
        Namespace: "AWS/SQS"
        MetricName: ApproximateNumberOfMessagesVisible
        Dimensions:
          - Name: QueueName
            Value: ${self:custom.transactionFirehoseQueue}
        Statistic: Maximum
        Period: 60
        Threshold: 500
        EvaluationPeriods: 3
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - Ref: AlarmTopic
        OKActions:
          - Ref: AlarmTopic
        TreatMissingData: missing

    TransactionFirehoseQueueActiveAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm if txs have not been added to queue in five minutes"
        Namespace: "AWS/SQS"
        MetricName: NumberOfMessagesSent
        Dimensions:
          - Name: QueueName
            Value: ${self:custom.transactionFirehoseQueue}
        Statistic: Sum
        Period: 300
        Threshold: 0
        EvaluationPeriods: 3
        ComparisonOperator: LessThanOrEqualToThreshold
        AlarmActions:
          - Ref: AlarmTopic
        OKActions:
          - Ref: AlarmTopic
        TreatMissingData: breaching
