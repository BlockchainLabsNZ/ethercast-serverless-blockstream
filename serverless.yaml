service:
  name: serverless-blockstream

plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-autoscaling
  - serverless-webpack

custom:
  webpackIncludeModules: true # enable auto-packing of external modules
  region: ${opt:region, self:provider.region}
  prefix: ${self:service}-${opt:stage, self:provider.stage}
  drainQLambdaName: ${self:custom.prefix}-drain-q
  queueName: ${self:custom.prefix}-new-blocks.fifo
  baseCapacity: 3
  capacities:
    - table: BlocksTable  # DynamoDB Resource
      index:              # List or single index name
        - ByBlockNumber
      read:
        minimum: ${self:custom.baseCapacity}        # Minimum read capacity
        maximum: 100      # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseCapacity}        # Minimum write capacity
        maximum: 100      # Maximum write capacity
        usage: 0.8        # Targeted usage percentage

provider:
  name: aws
  runtime: nodejs6.10
  environment: # service wide environment variables
    BLOCKSTREAM_STATE_TABLE: ${self:custom.prefix}-bs-state
    BLOCKS_TABLE: ${self:custom.prefix}-blocks
    DRAIN_QUEUE_LAMBDA_NAME: ${self:custom.drainQLambdaName}
    SRC_NODE_URL: "https://mainnet.infura.io/0eep3H3CSiqitPXv0aOy"
    SQS_BLOCK_RECEIVED_QUEUE_NAME: ${self:custom.queueName}
    BLOCK_DATA_TTL_MS: "3600000" # 1 hour
    LOG_LEVEL: "info" # info log level
    NETWORK_ID: "1"
    STARTING_BLOCK: "5143250"
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource:
        - "arn:aws:dynamodb:${self:custom.region}:#{AWS::AccountId}:table/${self:provider.environment.BLOCKSTREAM_STATE_TABLE}"
        - "arn:aws:dynamodb:${self:custom.region}:#{AWS::AccountId}:table/${self:provider.environment.BLOCKS_TABLE}"
        - "arn:aws:dynamodb:${self:custom.region}:#{AWS::AccountId}:table/${self:provider.environment.BLOCKS_TABLE}/*"
    - Effect: Allow
      Action: # Gives permission to push logs to the SQS queue
        - sqs:SendMessage
        - sqs:SendMessageBatch
        - sqs:DeleteMessage
        - sqs:GetQueueUrl
      Resource:
        - "arn:aws:sqs:${self:custom.region}:#{AWS::AccountId}:${self:custom.queueName}"

functions:
  poll-for-blocks:
    handler: src/poll.start
    memorySize: 256 # optional, in MB, default is 1024
    timeout: 120
    events:
      - schedule:
          rate: rate(2 minutes)
          enabled: true

  drain-queue:
    name: ${self:custom.drainQLambdaName}
    handler: src/drain.start
    memorySize: 256
    timeout: 120

resources:
  Resources:
    BlockStreamStateTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.environment.BLOCKSTREAM_STATE_TABLE}
          AttributeDefinitions:
            - AttributeName: network_id
              AttributeType: N
          KeySchema:
            - AttributeName: network_id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: ${self:custom.baseCapacity}
            WriteCapacityUnits: ${self:custom.baseCapacity}

    BlocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BLOCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: hash
            AttributeType: S
          - AttributeName: number
            AttributeType: S
        KeySchema:
          - AttributeName: hash
            KeyType: HASH
          - AttributeName: number
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseCapacity}
          WriteCapacityUnits: ${self:custom.baseCapacity}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        GlobalSecondaryIndexes:
          -
            IndexName: ByBlockNumber
            KeySchema:
              - AttributeName: number
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.baseCapacity}
              WriteCapacityUnits: ${self:custom.baseCapacity}

    NewBlockQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}
        FifoQueue: true
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
